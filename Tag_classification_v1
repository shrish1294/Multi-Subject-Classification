{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4347ac9e",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-06-16T13:36:45.791479Z",
     "iopub.status.busy": "2024-06-16T13:36:45.790940Z",
     "iopub.status.idle": "2024-06-16T13:36:46.873968Z",
     "shell.execute_reply": "2024-06-16T13:36:46.872715Z"
    },
    "papermill": {
     "duration": 1.09928,
     "end_time": "2024-06-16T13:36:46.876707",
     "exception": false,
     "start_time": "2024-06-16T13:36:45.777427",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/multilabel-classification-dataset/sample_submission.csv\n",
      "/kaggle/input/multilabel-classification-dataset/train.csv\n",
      "/kaggle/input/multilabel-classification-dataset/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c8831f38",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T13:36:46.901221Z",
     "iopub.status.busy": "2024-06-16T13:36:46.900650Z",
     "iopub.status.idle": "2024-06-16T13:36:47.542417Z",
     "shell.execute_reply": "2024-06-16T13:36:47.540977Z"
    },
    "papermill": {
     "duration": 0.657274,
     "end_time": "2024-06-16T13:36:47.545436",
     "exception": false,
     "start_time": "2024-06-16T13:36:46.888162",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"/kaggle/input/multilabel-classification-dataset/train.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "abba028a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T13:36:47.570101Z",
     "iopub.status.busy": "2024-06-16T13:36:47.569655Z",
     "iopub.status.idle": "2024-06-16T13:36:47.576560Z",
     "shell.execute_reply": "2024-06-16T13:36:47.575256Z"
    },
    "papermill": {
     "duration": 0.022663,
     "end_time": "2024-06-16T13:36:47.579316",
     "exception": false,
     "start_time": "2024-06-16T13:36:47.556653",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def preprocess_input(df):\n",
    "    \n",
    "    def tokenize():\n",
    "        pass\n",
    "    def stemming():\n",
    "        pass\n",
    "    \n",
    "    def get_id_from_text():\n",
    "        pass\n",
    "    def get_text_from_id():\n",
    "        pass\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ff632a65",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T13:36:47.602843Z",
     "iopub.status.busy": "2024-06-16T13:36:47.602308Z",
     "iopub.status.idle": "2024-06-16T13:36:47.608406Z",
     "shell.execute_reply": "2024-06-16T13:36:47.607014Z"
    },
    "papermill": {
     "duration": 0.020656,
     "end_time": "2024-06-16T13:36:47.610973",
     "exception": false,
     "start_time": "2024-06-16T13:36:47.590317",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "label_tags = ['Computer Science', 'Physics', 'Mathematics','Statistics', 'Quantitative Biology', 'Quantitative Finance']\n",
    "label_tags\n",
    "input_tags = ['TITLE', 'ABSTRACT']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7355a03e",
   "metadata": {
    "papermill": {
     "duration": 0.01102,
     "end_time": "2024-06-16T13:36:47.633348",
     "exception": false,
     "start_time": "2024-06-16T13:36:47.622328",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Data Preprocessing**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "63f0cbd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T13:36:47.657129Z",
     "iopub.status.busy": "2024-06-16T13:36:47.656703Z",
     "iopub.status.idle": "2024-06-16T13:37:06.309991Z",
     "shell.execute_reply": "2024-06-16T13:37:06.308723Z"
    },
    "papermill": {
     "duration": 18.668572,
     "end_time": "2024-06-16T13:37:06.313052",
     "exception": false,
     "start_time": "2024-06-16T13:36:47.644480",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-06-16 13:36:50.149745: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-06-16 13:36:50.149924: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-06-16 13:36:50.326074: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "import tensorflow_text as tf_text\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "76fec34b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T13:37:06.344192Z",
     "iopub.status.busy": "2024-06-16T13:37:06.343436Z",
     "iopub.status.idle": "2024-06-16T13:37:06.356268Z",
     "shell.execute_reply": "2024-06-16T13:37:06.355034Z"
    },
    "papermill": {
     "duration": 0.030253,
     "end_time": "2024-06-16T13:37:06.358909",
     "exception": false,
     "start_time": "2024-06-16T13:37:06.328656",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.layers import TextVectorization\n",
    "import re\n",
    "import string\n",
    "# Create a custom standardization function to strip HTML break tags '<br />'.\n",
    "def custom_standardization(input_data):\n",
    "  lowercase = tf.strings.lower(input_data)\n",
    "  stripped_html = tf.strings.regex_replace(lowercase, '<br />', ' ')\n",
    "  return tf.strings.regex_replace(stripped_html,\n",
    "                                  '[%s]' % re.escape(string.punctuation), '')\n",
    "\n",
    "\n",
    "# Vocabulary size and number of words in a sequence.\n",
    "\n",
    "def get_vectorize_layer(vocab_size=10000, sequence_length=100):\n",
    "    vectorize_layer = TextVectorization(\n",
    "        standardize=custom_standardization,\n",
    "        max_tokens=vocab_size,\n",
    "        output_mode='int',\n",
    "        output_sequence_length=sequence_length)\n",
    "    return vectorize_layer\n",
    "\n",
    "def get_text_from_tokens(tensor, vocab):\n",
    "    text = \"\"\n",
    "    for i in tensor.numpy():\n",
    "        if vocab[i]:\n",
    "            text =text +  f\" {vocab[i]}\"\n",
    "\n",
    "    return text\n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e94b28e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T13:37:06.384429Z",
     "iopub.status.busy": "2024-06-16T13:37:06.383952Z",
     "iopub.status.idle": "2024-06-16T13:37:06.394581Z",
     "shell.execute_reply": "2024-06-16T13:37:06.393210Z"
    },
    "papermill": {
     "duration": 0.026281,
     "end_time": "2024-06-16T13:37:06.397059",
     "exception": false,
     "start_time": "2024-06-16T13:37:06.370778",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_labels(df, tags):\n",
    "    labels = []\n",
    "    for i, row in df.iterrows():\n",
    "        encode = [row[j] for j in tags]\n",
    "        labels.append(encode)\n",
    "    return labels\n",
    "\n",
    "def get_train_val_input_data(df, label_cols):\n",
    "    train_data, valid_data = train_test_split(df, train_size=0.8, shuffle=True)\n",
    "    train_title_data = list(train_data['TITLE'])\n",
    "    train_abstract_data = list(train_data['ABSTRACT'])\n",
    "    valid_title_data = list(valid_data['TITLE'])\n",
    "    valid_abstract_data = list(valid_data['ABSTRACT'])\n",
    "    train_labels = get_labels(train_data, label_cols)\n",
    "    valid_labels = get_labels(valid_data, label_cols)\n",
    "    input_data = {\n",
    "        'train_data' : (train_title_data, train_abstract_data),\n",
    "        'train_label' : train_labels,\n",
    "        'valid_data' : (valid_title_data, valid_abstract_data),\n",
    "        'valid_label': valid_labels\n",
    "    }\n",
    "    return input_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "08deb14e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T13:37:06.420831Z",
     "iopub.status.busy": "2024-06-16T13:37:06.420430Z",
     "iopub.status.idle": "2024-06-16T13:37:06.427505Z",
     "shell.execute_reply": "2024-06-16T13:37:06.426218Z"
    },
    "papermill": {
     "duration": 0.021949,
     "end_time": "2024-06-16T13:37:06.430103",
     "exception": false,
     "start_time": "2024-06-16T13:37:06.408154",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_dataset(input_data, labels, title_vectorize_layer, abstract_vectorize_layer, batch_size=32):\n",
    "    dataset = tf.data.Dataset.from_tensor_slices((input_data, labels)).map(lambda x,y : ((title_vectorize_layer(x[0]), abstract_vectorize_layer(x[1])), y)).batch(batch_size)\n",
    "    return dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "93531fca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T13:37:06.456620Z",
     "iopub.status.busy": "2024-06-16T13:37:06.455043Z",
     "iopub.status.idle": "2024-06-16T13:37:06.515336Z",
     "shell.execute_reply": "2024-06-16T13:37:06.513688Z"
    },
    "papermill": {
     "duration": 0.077126,
     "end_time": "2024-06-16T13:37:06.518204",
     "exception": false,
     "start_time": "2024-06-16T13:37:06.441078",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "title_vectorize_layer = get_vectorize_layer(50000)\n",
    "abstract_vectorize_layer = get_vectorize_layer(50000 ,sequence_length=200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "49369f41",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T13:37:06.544037Z",
     "iopub.status.busy": "2024-06-16T13:37:06.543622Z",
     "iopub.status.idle": "2024-06-16T13:37:06.817649Z",
     "shell.execute_reply": "2024-06-16T13:37:06.816370Z"
    },
    "papermill": {
     "duration": 0.290887,
     "end_time": "2024-06-16T13:37:06.820979",
     "exception": false,
     "start_time": "2024-06-16T13:37:06.530092",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "title_vectorize_layer.adapt(list(df['TITLE']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b0b6ef12",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T13:37:06.845841Z",
     "iopub.status.busy": "2024-06-16T13:37:06.845431Z",
     "iopub.status.idle": "2024-06-16T13:37:08.480286Z",
     "shell.execute_reply": "2024-06-16T13:37:08.479293Z"
    },
    "papermill": {
     "duration": 1.650644,
     "end_time": "2024-06-16T13:37:08.483066",
     "exception": false,
     "start_time": "2024-06-16T13:37:06.832422",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "abstract_vectorize_layer.adapt(list(df['ABSTRACT']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1b6e4877",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T13:37:08.506917Z",
     "iopub.status.busy": "2024-06-16T13:37:08.506508Z",
     "iopub.status.idle": "2024-06-16T13:37:08.552965Z",
     "shell.execute_reply": "2024-06-16T13:37:08.551734Z"
    },
    "papermill": {
     "duration": 0.061358,
     "end_time": "2024-06-16T13:37:08.555537",
     "exception": false,
     "start_time": "2024-06-16T13:37:08.494179",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Tensor: shape=(100,), dtype=int64, numpy=\n",
       "array([   17, 10177,   471,    20,     5,    61,   895,   179,    11,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0])>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check sample representation : \n",
    "title_vectorize_layer(df['TITLE'][400])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "7c34e6a9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T13:37:08.579908Z",
     "iopub.status.busy": "2024-06-16T13:37:08.579477Z",
     "iopub.status.idle": "2024-06-16T13:37:10.478441Z",
     "shell.execute_reply": "2024-06-16T13:37:10.477268Z"
    },
    "papermill": {
     "duration": 1.914538,
     "end_time": "2024-06-16T13:37:10.481350",
     "exception": false,
     "start_time": "2024-06-16T13:37:08.566812",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_data = get_train_val_input_data(df, label_tags)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "17bf5d0c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T13:37:10.505603Z",
     "iopub.status.busy": "2024-06-16T13:37:10.505213Z",
     "iopub.status.idle": "2024-06-16T13:37:11.619244Z",
     "shell.execute_reply": "2024-06-16T13:37:11.618011Z"
    },
    "papermill": {
     "duration": 1.129474,
     "end_time": "2024-06-16T13:37:11.622089",
     "exception": false,
     "start_time": "2024-06-16T13:37:10.492615",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data = get_dataset(input_data['train_data'], input_data['train_label'], title_vectorize_layer, abstract_vectorize_layer, 64)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c1ec24e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T13:37:11.646495Z",
     "iopub.status.busy": "2024-06-16T13:37:11.646066Z",
     "iopub.status.idle": "2024-06-16T13:37:12.025424Z",
     "shell.execute_reply": "2024-06-16T13:37:12.024089Z"
    },
    "papermill": {
     "duration": 0.394822,
     "end_time": "2024-06-16T13:37:12.028339",
     "exception": false,
     "start_time": "2024-06-16T13:37:11.633517",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "valid_data = get_dataset(input_data['valid_data'], input_data['valid_label'], title_vectorize_layer, abstract_vectorize_layer, 64)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c4994f90",
   "metadata": {
    "papermill": {
     "duration": 0.010751,
     "end_time": "2024-06-16T13:37:12.050244",
     "exception": false,
     "start_time": "2024-06-16T13:37:12.039493",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7316b8ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T13:37:12.074458Z",
     "iopub.status.busy": "2024-06-16T13:37:12.074024Z",
     "iopub.status.idle": "2024-06-16T13:37:12.086112Z",
     "shell.execute_reply": "2024-06-16T13:37:12.084850Z"
    },
    "papermill": {
     "duration": 0.027322,
     "end_time": "2024-06-16T13:37:12.088671",
     "exception": false,
     "start_time": "2024-06-16T13:37:12.061349",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_model():\n",
    "    input1, input2= tf.keras.layers.Input(shape=(100, ), name='title_input'), tf.keras.layers.Input(shape=(200, ), name='abstract_input')\n",
    "#     inputs = tf.keras.layers.Concatenate(axis=-1, name='concatenate_layer')([input1, input2])\n",
    "    title_embs = tf.keras.layers.Embedding(50000, 64, name='title_embedding_layer')(input1)\n",
    "    abstract_embs = tf.keras.layers.Embedding(50000, 64, name='abstract_embedding_layer')(input2)\n",
    "#     out = tf.keras.layers.GlobalAveragePooling1D()(embs)\n",
    "    title_lstm = tf.keras.layers.LSTM(6, return_sequences=False, return_state=False)\n",
    "    abstract_lstm = tf.keras.layers.LSTM(6, return_sequences=False, return_state=False)\n",
    "    title_whole_seq_output = title_lstm(title_embs)\n",
    "    abstract_whole_seq_output = abstract_lstm(abstract_embs)\n",
    "    merge_layer = tf.keras.layers.Add()([title_whole_seq_output, abstract_whole_seq_output])\n",
    "    outs = tf.keras.layers.Dense(6, activation='sigmoid')(merge_layer)\n",
    "    \n",
    "    return tf.keras.Model((input1, input2), outs)\n",
    "    \n",
    "def predict(model, title, abstract):\n",
    "    title = title_vectorize_layer(title)\n",
    "#     title = tf.expand_dims(title, 0)\n",
    "    \n",
    "    abstract = abstract_vectorize_layer(abstract)\n",
    "#     abstract = tf.expand_dims(abstract, 0)\n",
    "    print(title.get_shape(), abstract.get_shape())\n",
    "    resp = model.predict((title, abstract))\n",
    "    return resp\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "9a438f11",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T13:37:12.112554Z",
     "iopub.status.busy": "2024-06-16T13:37:12.112110Z",
     "iopub.status.idle": "2024-06-16T13:37:12.249143Z",
     "shell.execute_reply": "2024-06-16T13:37:12.247944Z"
    },
    "papermill": {
     "duration": 0.152459,
     "end_time": "2024-06-16T13:37:12.252059",
     "exception": false,
     "start_time": "2024-06-16T13:37:12.099600",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model = get_model()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f50d9598",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T13:37:12.276841Z",
     "iopub.status.busy": "2024-06-16T13:37:12.276464Z",
     "iopub.status.idle": "2024-06-16T13:37:12.292768Z",
     "shell.execute_reply": "2024-06-16T13:37:12.291627Z"
    },
    "papermill": {
     "duration": 0.031945,
     "end_time": "2024-06-16T13:37:12.295577",
     "exception": false,
     "start_time": "2024-06-16T13:37:12.263632",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f5cf10bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T13:37:12.319503Z",
     "iopub.status.busy": "2024-06-16T13:37:12.319065Z",
     "iopub.status.idle": "2024-06-16T13:37:12.350373Z",
     "shell.execute_reply": "2024-06-16T13:37:12.348988Z"
    },
    "papermill": {
     "duration": 0.046339,
     "end_time": "2024-06-16T13:37:12.353026",
     "exception": false,
     "start_time": "2024-06-16T13:37:12.306687",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_1\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"functional_1\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)        </span>┃<span style=\"font-weight: bold\"> Output Shape      </span>┃<span style=\"font-weight: bold\">    Param # </span>┃<span style=\"font-weight: bold\"> Connected to      </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n",
       "│ title_input         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n",
       "├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n",
       "│ abstract_input      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">200</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n",
       "├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n",
       "│ title_embedding_la… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)   │  <span style=\"color: #00af00; text-decoration-color: #00af00\">3,200,000</span> │ title_input[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>] │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │                   │            │                   │\n",
       "├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n",
       "│ abstract_embedding… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">200</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)   │  <span style=\"color: #00af00; text-decoration-color: #00af00\">3,200,000</span> │ abstract_input[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>… │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │                   │            │                   │\n",
       "├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n",
       "│ lstm (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">6</span>)         │      <span style=\"color: #00af00; text-decoration-color: #00af00\">1,704</span> │ title_embedding_… │\n",
       "├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n",
       "│ lstm_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">6</span>)         │      <span style=\"color: #00af00; text-decoration-color: #00af00\">1,704</span> │ abstract_embeddi… │\n",
       "├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n",
       "│ add (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Add</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">6</span>)         │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ lstm[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],       │\n",
       "│                     │                   │            │ lstm_1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]      │\n",
       "├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">6</span>)         │         <span style=\"color: #00af00; text-decoration-color: #00af00\">42</span> │ add[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]         │\n",
       "└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)       \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape     \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m   Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to     \u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n",
       "│ title_input         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ -                 │\n",
       "│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n",
       "├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n",
       "│ abstract_input      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m200\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ -                 │\n",
       "│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n",
       "├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n",
       "│ title_embedding_la… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m64\u001b[0m)   │  \u001b[38;5;34m3,200,000\u001b[0m │ title_input[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m] │\n",
       "│ (\u001b[38;5;33mEmbedding\u001b[0m)         │                   │            │                   │\n",
       "├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n",
       "│ abstract_embedding… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m200\u001b[0m, \u001b[38;5;34m64\u001b[0m)   │  \u001b[38;5;34m3,200,000\u001b[0m │ abstract_input[\u001b[38;5;34m0\u001b[0m… │\n",
       "│ (\u001b[38;5;33mEmbedding\u001b[0m)         │                   │            │                   │\n",
       "├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n",
       "│ lstm (\u001b[38;5;33mLSTM\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m6\u001b[0m)         │      \u001b[38;5;34m1,704\u001b[0m │ title_embedding_… │\n",
       "├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n",
       "│ lstm_1 (\u001b[38;5;33mLSTM\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m6\u001b[0m)         │      \u001b[38;5;34m1,704\u001b[0m │ abstract_embeddi… │\n",
       "├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n",
       "│ add (\u001b[38;5;33mAdd\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m6\u001b[0m)         │          \u001b[38;5;34m0\u001b[0m │ lstm[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],       │\n",
       "│                     │                   │            │ lstm_1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]      │\n",
       "├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m6\u001b[0m)         │         \u001b[38;5;34m42\u001b[0m │ add[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]         │\n",
       "└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">6,403,450</span> (24.43 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m6,403,450\u001b[0m (24.43 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">6,403,450</span> (24.43 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m6,403,450\u001b[0m (24.43 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "7b32658a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T13:37:12.379776Z",
     "iopub.status.busy": "2024-06-16T13:37:12.379340Z",
     "iopub.status.idle": "2024-06-16T13:37:12.728739Z",
     "shell.execute_reply": "2024-06-16T13:37:12.727537Z"
    },
    "papermill": {
     "duration": 0.366306,
     "end_time": "2024-06-16T13:37:12.731463",
     "exception": false,
     "start_time": "2024-06-16T13:37:12.365157",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tf.keras.utils.plot_model(model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "33703333",
   "metadata": {
    "collapsed": true,
    "execution": {
     "iopub.execute_input": "2024-06-16T13:37:12.760428Z",
     "iopub.status.busy": "2024-06-16T13:37:12.759596Z",
     "iopub.status.idle": "2024-06-16T13:42:11.676969Z",
     "shell.execute_reply": "2024-06-16T13:42:11.675448Z"
    },
    "jupyter": {
     "outputs_hidden": true
    },
    "papermill": {
     "duration": 298.934565,
     "end_time": "2024-06-16T13:42:11.679764",
     "exception": false,
     "start_time": "2024-06-16T13:37:12.745199",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "\u001b[1m263/263\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m34s\u001b[0m 115ms/step - accuracy: 0.3578 - loss: 0.4852 - val_accuracy: 0.4043 - val_loss: 0.4326\n",
      "Epoch 2/10\n",
      "\u001b[1m263/263\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 111ms/step - accuracy: 0.4384 - loss: 0.4283 - val_accuracy: 0.4315 - val_loss: 0.4243\n",
      "Epoch 3/10\n",
      "\u001b[1m263/263\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 111ms/step - accuracy: 0.4551 - loss: 0.4188 - val_accuracy: 0.5130 - val_loss: 0.3881\n",
      "Epoch 4/10\n",
      "\u001b[1m263/263\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 111ms/step - accuracy: 0.5846 - loss: 0.3722 - val_accuracy: 0.6634 - val_loss: 0.3503\n",
      "Epoch 5/10\n",
      "\u001b[1m263/263\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 110ms/step - accuracy: 0.6870 - loss: 0.3307 - val_accuracy: 0.6451 - val_loss: 0.3557\n",
      "Epoch 6/10\n",
      "\u001b[1m263/263\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 111ms/step - accuracy: 0.7147 - loss: 0.3118 - val_accuracy: 0.6079 - val_loss: 0.3695\n",
      "Epoch 7/10\n",
      "\u001b[1m263/263\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 111ms/step - accuracy: 0.6884 - loss: 0.3133 - val_accuracy: 0.7061 - val_loss: 0.3079\n",
      "Epoch 8/10\n",
      "\u001b[1m263/263\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 113ms/step - accuracy: 0.7824 - loss: 0.2580 - val_accuracy: 0.7242 - val_loss: 0.2929\n",
      "Epoch 9/10\n",
      "\u001b[1m263/263\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 112ms/step - accuracy: 0.8163 - loss: 0.2272 - val_accuracy: 0.7087 - val_loss: 0.2869\n",
      "Epoch 10/10\n",
      "\u001b[1m263/263\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 112ms/step - accuracy: 0.8227 - loss: 0.2012 - val_accuracy: 0.6918 - val_loss: 0.2890\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(train_data, validation_data=valid_data, epochs=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46872c54",
   "metadata": {
    "papermill": {
     "duration": 0.269062,
     "end_time": "2024-06-16T13:42:12.215937",
     "exception": false,
     "start_time": "2024-06-16T13:42:11.946875",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "115c68ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T13:42:12.747094Z",
     "iopub.status.busy": "2024-06-16T13:42:12.746686Z",
     "iopub.status.idle": "2024-06-16T13:42:13.042737Z",
     "shell.execute_reply": "2024-06-16T13:42:13.041538Z"
    },
    "papermill": {
     "duration": 0.563051,
     "end_time": "2024-06-16T13:42:13.045259",
     "exception": false,
     "start_time": "2024-06-16T13:42:12.482208",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7be457c19960>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.plot([i for i in range(0, history.params['epochs'])], history.history['loss'], label='train_loss')\n",
    "plt.plot([i for i in range(0, history.params['epochs'])], history.history['val_loss'], label='val_loss')\n",
    "plt.xlabel(\"epochs\")\n",
    "plt.ylabel(\"loss\")\n",
    "plt.legend()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "ffbe91d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T13:42:13.586390Z",
     "iopub.status.busy": "2024-06-16T13:42:13.585931Z",
     "iopub.status.idle": "2024-06-16T13:42:13.862463Z",
     "shell.execute_reply": "2024-06-16T13:42:13.861321Z"
    },
    "papermill": {
     "duration": 0.552754,
     "end_time": "2024-06-16T13:42:13.865711",
     "exception": false,
     "start_time": "2024-06-16T13:42:13.312957",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot([i for i in range(0, history.params['epochs'])], history.history['accuracy'], label='train_acc')\n",
    "plt.plot([i for i in range(0, history.params['epochs'])], history.history['val_accuracy'], label='val_acc')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8807c01c",
   "metadata": {
    "papermill": {
     "duration": 0.281888,
     "end_time": "2024-06-16T13:42:14.434502",
     "exception": false,
     "start_time": "2024-06-16T13:42:14.152614",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**TEST DATASET PREDICTION**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "58265630",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T13:42:14.988857Z",
     "iopub.status.busy": "2024-06-16T13:42:14.988368Z",
     "iopub.status.idle": "2024-06-16T13:42:15.452258Z",
     "shell.execute_reply": "2024-06-16T13:42:15.451019Z"
    },
    "papermill": {
     "duration": 0.750718,
     "end_time": "2024-06-16T13:42:15.455227",
     "exception": false,
     "start_time": "2024-06-16T13:42:14.704509",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_df = pd.read_csv('/kaggle/input/multilabel-classification-dataset/test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "f71d24f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T13:42:16.063216Z",
     "iopub.status.busy": "2024-06-16T13:42:16.062801Z",
     "iopub.status.idle": "2024-06-16T13:42:23.069588Z",
     "shell.execute_reply": "2024-06-16T13:42:23.068381Z"
    },
    "papermill": {
     "duration": 7.285112,
     "end_time": "2024-06-16T13:42:23.072579",
     "exception": false,
     "start_time": "2024-06-16T13:42:15.787467",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(8989, 100) (8989, 200)\n",
      "\u001b[1m281/281\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 21ms/step\n"
     ]
    }
   ],
   "source": [
    "test_preds = predict(model, test_df['TITLE'], test_df['ABSTRACT'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "9944861a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T13:42:23.633990Z",
     "iopub.status.busy": "2024-06-16T13:42:23.633174Z",
     "iopub.status.idle": "2024-06-16T13:42:23.691352Z",
     "shell.execute_reply": "2024-06-16T13:42:23.690224Z"
    },
    "papermill": {
     "duration": 0.341939,
     "end_time": "2024-06-16T13:42:23.694317",
     "exception": false,
     "start_time": "2024-06-16T13:42:23.352378",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "results = pd.DataFrame(test_preds, columns=label_tags)\n",
    "for i in label_tags:\n",
    "    results[i] = results[i].apply(lambda x: 1 if x >=0.5 else 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "1124e87b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T13:42:24.253978Z",
     "iopub.status.busy": "2024-06-16T13:42:24.253570Z",
     "iopub.status.idle": "2024-06-16T13:42:24.261351Z",
     "shell.execute_reply": "2024-06-16T13:42:24.259992Z"
    },
    "papermill": {
     "duration": 0.291779,
     "end_time": "2024-06-16T13:42:24.263812",
     "exception": false,
     "start_time": "2024-06-16T13:42:23.972033",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "results['TITLE'] = test_df['TITLE']\n",
    "results['ABSTRACT'] = test_df['ABSTRACT']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "deefa6ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T13:42:24.822779Z",
     "iopub.status.busy": "2024-06-16T13:42:24.822365Z",
     "iopub.status.idle": "2024-06-16T13:42:24.846574Z",
     "shell.execute_reply": "2024-06-16T13:42:24.845396Z"
    },
    "papermill": {
     "duration": 0.306743,
     "end_time": "2024-06-16T13:42:24.848978",
     "exception": false,
     "start_time": "2024-06-16T13:42:24.542235",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Computer Science</th>\n",
       "      <th>Physics</th>\n",
       "      <th>Mathematics</th>\n",
       "      <th>Statistics</th>\n",
       "      <th>Quantitative Biology</th>\n",
       "      <th>Quantitative Finance</th>\n",
       "      <th>TITLE</th>\n",
       "      <th>ABSTRACT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Closed-form Marginal Likelihood in Gamma-Poiss...</td>\n",
       "      <td>We present novel understandings of the Gamma...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Laboratory mid-IR spectra of equilibrated and ...</td>\n",
       "      <td>Meteorites contain minerals from Solar Syste...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Case For Static AMSDU Aggregation in WLANs</td>\n",
       "      <td>Frame aggregation is a mechanism by which mu...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>The $Gaia$-ESO Survey: the inner disk intermed...</td>\n",
       "      <td>Milky Way open clusters are very diverse in ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Witness-Functions versus Interpretation-Functi...</td>\n",
       "      <td>Proving that a cryptographic protocol is cor...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8984</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Supporting mixed-datatype matrix multiplicatio...</td>\n",
       "      <td>We approach the problem of implementing mixe...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8985</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>An axiomatic basis for Blackwell optimality</td>\n",
       "      <td>In the theory of Markov decision processes (...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8986</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>GeneVis - An interactive visualization tool fo...</td>\n",
       "      <td>GeneVis is a web-based tool to visualize com...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8987</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Quantifying the causal effect of speed cameras...</td>\n",
       "      <td>This paper quantifies the effect of speed ca...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8988</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Cube-magic labelings of grids</td>\n",
       "      <td>We show that the vertices and edges of a $d$...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8989 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Computer Science  Physics  Mathematics  Statistics  \\\n",
       "0                    0        0            1           0   \n",
       "1                    0        1            0           0   \n",
       "2                    0        0            0           0   \n",
       "3                    0        1            0           0   \n",
       "4                    1        0            0           0   \n",
       "...                ...      ...          ...         ...   \n",
       "8984                 1        0            0           0   \n",
       "8985                 1        0            0           0   \n",
       "8986                 1        0            0           0   \n",
       "8987                 0        0            0           1   \n",
       "8988                 1        0            0           0   \n",
       "\n",
       "      Quantitative Biology  Quantitative Finance  \\\n",
       "0                        0                     0   \n",
       "1                        0                     0   \n",
       "2                        0                     0   \n",
       "3                        0                     0   \n",
       "4                        0                     0   \n",
       "...                    ...                   ...   \n",
       "8984                     0                     0   \n",
       "8985                     0                     0   \n",
       "8986                     0                     0   \n",
       "8987                     0                     0   \n",
       "8988                     0                     0   \n",
       "\n",
       "                                                  TITLE  \\\n",
       "0     Closed-form Marginal Likelihood in Gamma-Poiss...   \n",
       "1     Laboratory mid-IR spectra of equilibrated and ...   \n",
       "2            Case For Static AMSDU Aggregation in WLANs   \n",
       "3     The $Gaia$-ESO Survey: the inner disk intermed...   \n",
       "4     Witness-Functions versus Interpretation-Functi...   \n",
       "...                                                 ...   \n",
       "8984  Supporting mixed-datatype matrix multiplicatio...   \n",
       "8985        An axiomatic basis for Blackwell optimality   \n",
       "8986  GeneVis - An interactive visualization tool fo...   \n",
       "8987  Quantifying the causal effect of speed cameras...   \n",
       "8988                      Cube-magic labelings of grids   \n",
       "\n",
       "                                               ABSTRACT  \n",
       "0       We present novel understandings of the Gamma...  \n",
       "1       Meteorites contain minerals from Solar Syste...  \n",
       "2       Frame aggregation is a mechanism by which mu...  \n",
       "3       Milky Way open clusters are very diverse in ...  \n",
       "4       Proving that a cryptographic protocol is cor...  \n",
       "...                                                 ...  \n",
       "8984    We approach the problem of implementing mixe...  \n",
       "8985    In the theory of Markov decision processes (...  \n",
       "8986    GeneVis is a web-based tool to visualize com...  \n",
       "8987    This paper quantifies the effect of speed ca...  \n",
       "8988    We show that the vertices and edges of a $d$...  \n",
       "\n",
       "[8989 rows x 8 columns]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "335196db",
   "metadata": {
    "papermill": {
     "duration": 0.281032,
     "end_time": "2024-06-16T13:42:25.415999",
     "exception": false,
     "start_time": "2024-06-16T13:42:25.134967",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "de302b34",
   "metadata": {
    "papermill": {
     "duration": 0.280758,
     "end_time": "2024-06-16T13:42:25.979396",
     "exception": false,
     "start_time": "2024-06-16T13:42:25.698638",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 1123189,
     "sourceId": 1885658,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 346.542538,
   "end_time": "2024-06-16T13:42:29.020716",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-16T13:36:42.478178",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
